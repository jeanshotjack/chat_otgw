{"ast":null,"code":"var _jsxFileName = \"/Users/Jack/Documents/chat-app-react/src/containers/message/MessageList.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { messagesRequested } from '../../store/actions';\nimport Message from '../../components/message/Message';\nimport './MessageList.scss';\n\nconst MessageList = ({\n  conversationId,\n  getMessagesForConversation,\n  loadMessages\n}) => {\n  const messageDetails = getMessagesForConversation(conversationId);\n  const messages = messageDetails ? messageDetails.messages : null;\n  let messageItems = null;\n  useEffect(() => {\n    if (!messageDetails) {\n      loadMessages(conversationId, null);\n    }\n  }, [messageDetails, loadMessages, conversationId]);\n\n  if (messages && messages.length > 0) {\n    messageItems = messages.map((message, index) => {\n      return /*#__PURE__*/React.createElement(Message, {\n        key: index,\n        isMyMessage: message.isMyMessage,\n        message: message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 20\n        }\n      });\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat-message-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, messageItems);\n};\n\nconst mapStateToProps = state => {\n  const getMessagesForConversation = conversationId => {\n    return state.messagesState.messageDetails[conversationId];\n  };\n\n  return {\n    getMessagesForConversation\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  const loadMessages = (conversationId, lastMessageId) => {\n    dispatch(messagesRequested(conversationId, 5, lastMessageId));\n  };\n\n  return {\n    loadMessages\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageList);","map":{"version":3,"sources":["/Users/Jack/Documents/chat-app-react/src/containers/message/MessageList.js"],"names":["React","useEffect","connect","messagesRequested","Message","MessageList","conversationId","getMessagesForConversation","loadMessages","messageDetails","messages","messageItems","length","map","message","index","isMyMessage","mapStateToProps","state","messagesState","mapDispatchToProps","dispatch","lastMessageId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAO,oBAAP;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,cAAF;AAAkBC,EAAAA,0BAAlB;AAA8CC,EAAAA;AAA9C,CAAD,KAAkE;AAClF,QAAMC,cAAc,GAAGF,0BAA0B,CAACD,cAAD,CAAjD;AACA,QAAMI,QAAQ,GAAGD,cAAc,GAAGA,cAAc,CAACC,QAAlB,GAA4B,IAA3D;AACA,MAAIC,YAAY,GAAG,IAAnB;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACQ,cAAL,EAAqB;AACjBD,MAAAA,YAAY,CAACF,cAAD,EAAiB,IAAjB,CAAZ;AACH;AACJ,GAJQ,EAIN,CAACG,cAAD,EAAiBD,YAAjB,EAA+BF,cAA/B,CAJM,CAAT;;AAMA,MAAII,QAAQ,IAAIA,QAAQ,CAACE,MAAT,GAAkB,CAAlC,EAAqC;AACjCD,IAAAA,YAAY,GAAGD,QAAQ,CAACG,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC5C,0BAAO,oBAAC,OAAD;AACH,QAAA,GAAG,EAAEA,KADF;AAEH,QAAA,WAAW,EAAED,OAAO,CAACE,WAFlB;AAGH,QAAA,OAAO,EAAEF,OAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAIH,KALc,CAAf;AAMH;;AAED,sBACI;AAAK,IAAA,EAAE,EAAC,mBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKH,YADL,CADJ;AAKH,CAzBD;;AA2BA,MAAMM,eAAe,GAAGC,KAAK,IAAI;AAC7B,QAAMX,0BAA0B,GAAGD,cAAc,IAAI;AACjD,WAAOY,KAAK,CAACC,aAAN,CAAoBV,cAApB,CAAmCH,cAAnC,CAAP;AACH,GAFD;;AAIA,SAAO;AACHC,IAAAA;AADG,GAAP;AAGH,CARD;;AAUA,MAAMa,kBAAkB,GAAGC,QAAQ,IAAI;AACnC,QAAMb,YAAY,GAAG,CAACF,cAAD,EAAiBgB,aAAjB,KAAmC;AACpDD,IAAAA,QAAQ,CAAClB,iBAAiB,CAACG,cAAD,EAAiB,CAAjB,EAAoBgB,aAApB,CAAlB,CAAR;AACH,GAFD;;AAIA,SAAO;AAAEd,IAAAA;AAAF,GAAP;AACH,CAND;;AAQA,eAAeN,OAAO,CAClBe,eADkB,EAElBG,kBAFkB,CAAP,CAGbf,WAHa,CAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport { messagesRequested } from '../../store/actions';\nimport Message from '../../components/message/Message';\nimport './MessageList.scss';\n\nconst MessageList = ({ conversationId, getMessagesForConversation, loadMessages }) => {\n    const messageDetails = getMessagesForConversation(conversationId);\n    const messages = messageDetails ? messageDetails.messages: null;\n    let messageItems = null;\n\n    useEffect(() => {\n        if (!messageDetails) {\n            loadMessages(conversationId, null);\n        }\n    }, [messageDetails, loadMessages, conversationId])\n\n    if (messages && messages.length > 0) {\n        messageItems = messages.map((message, index) => {\n            return <Message \n                key={index}\n                isMyMessage={message.isMyMessage}\n                message={message} />;\n        });\n    }\n\n    return (\n        <div id=\"chat-message-list\">\n            {messageItems}\n        </div>\n    );\n}\n\nconst mapStateToProps = state => {\n    const getMessagesForConversation = conversationId => {\n        return state.messagesState.messageDetails[conversationId];\n    }\n\n    return {\n        getMessagesForConversation\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    const loadMessages = (conversationId, lastMessageId) => {\n        dispatch(messagesRequested(conversationId, 5, lastMessageId));\n    }\n\n    return { loadMessages };\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(MessageList);"]},"metadata":{},"sourceType":"module"}